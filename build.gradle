import java.time.Instant

plugins {
	id 'base'
	id 'java'
	id 'maven-publish'
	id "dev.architectury.loom" version "1.6-SNAPSHOT"
	id "me.shedaniel.unified-publishing" version "0.1.+"
}

ext.ENV = System.getenv()
def isLocal = !ENV.containsKey("GITHUB_RUN_NUMBER")

version = "${mod_version}-${isLocal ? "local.${Instant.now().epochSecond}" : "build.${ENV.GITHUB_RUN_NUMBER}"}"
group = project.maven_group
base.archivesBaseName = project.archives_base_name

loom {
	silentMojangMappingsLicense()

	accessWidenerPath = file("src/main/resources/kubejs.accesswidener")
	interfaceInjection {
		interfaceInjectionSourceSets.add sourceSets.main
	}

	runs {
		client {
			if (ENV.MC_CLIENT_ARGS) {
				programArgs ENV.MC_CLIENT_ARGS.split(' ')
			}

			vmArgs("-XX:+IgnoreUnrecognizedVMOptions", "-XX:+AllowEnhancedClassRedefinition")
			runDir = 'run'
		}

		server {
			runDir = 'run_server'
		}
	}
}

compileJava {
	options.encoding = "UTF-8"
	options.release.set(21)
}

java {
	sourceCompatibility = targetCompatibility = '21'
	withSourcesJar()
}

repositories {
	mavenLocal()
	mavenCentral()

	maven {
		url "https://maven.architectury.dev/"
	}

	maven {
		url "https://maven.latvian.dev/releases"
		content {
			includeGroup "dev.latvian.mods"
		}
	}

	maven {
		url "https://maven.neoforged.net/releases"
	}

	maven {
		url "https://maven.blamejared.com"
		content {
			includeGroup "mezz.jei"
			includeGroup "net.darkhax.bookshelf"
			includeGroup "net.darkhax.gamestages"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
	mappings loom.officialMojangMappings()

	neoForge("net.neoforged:neoforge:${rootProject.neoforge_version}")

	modApi("dev.architectury:architectury-neoforge:${rootProject.architectury_version}")
	modApi("dev.latvian.mods:rhino-neoforge:${rootProject.rhino_version}") { transitive false }

	// todo: reevaluate if we want to depend on jei
	modCompileOnly("mezz.jei:jei-1.20.4-neoforge:${rootProject.jei_version}") { transitive(false) }

	modLocalRuntime modCompileOnly("me.shedaniel:RoughlyEnoughItems-neoforge:${rootProject.rei_version}")
}

processResources {
	def toReplace = [
			"version"             : project.version,
			"min_rhino_version"   : rootProject.min_rhino_version,
			"architectury_version": rootProject.architectury_version
	]

	inputs.properties toReplace
	filesMatching("META-INF/mods.toml") {
		expand toReplace
	}
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : project.mod_id,
				"Specification-Vendor"    : project.mod_author,
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : version,
				"Implementation-Vendor"   : project.mod_author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

remapJar {
	atAccessWideners.add "kubejs.accesswidener"
}

unifiedPublishing {
	project {
		releaseType = "${ENV.RELEASE_TYPE ?: 'release'}"
		gameVersions = [
				rootProject.minecraft_version
		]
		gameLoaders = ["neoforge"]
		displayName = "$mod_name NeoForge $project.version"
		changelog = 'Changelog not available'
		mainPublication remapJar

		relations {
			depends {
				curseforge = modrinth = "architectury-api"
			}
			depends {
				curseforge = modrinth = "rhino"
			}
		}

		if (ENV.CURSEFORGE_KEY) {
			curseforge {
				token = ENV.CURSEFORGE_KEY
				id = project.curseforge_id
			}
		}

		if (ENV.MODRINTH_TOKEN) {
			modrinth {
				token = ENV.MODRINTH_TOKEN
				id = project.modrinth_id
				version = "$project.version+$project.name"
			}
		}
	}
}

publishing {
	publications {
		mavenNeoForge(MavenPublication) {
			artifactId = "${rootProject.archives_base_name}-neoforge"
			from components.java
		}
	}

	repositories {
		if (ENV.MAVEN_TOKEN) {
			maven {
				url "https://maven.latvian.dev/releases"
				credentials {
					username = "lat"
					password = "${ENV.MAVEN_TOKEN}"
				}
			}
		}

		if (ENV.SAPS_TOKEN) {
			maven {
				url "https://maven.saps.dev/releases"
				credentials {
					username = "latvian"
					password = "${ENV.SAPS_TOKEN}"
				}
			}
		}
	}
}

afterEvaluate {
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xmaxerrs" << "1000"
	}
}